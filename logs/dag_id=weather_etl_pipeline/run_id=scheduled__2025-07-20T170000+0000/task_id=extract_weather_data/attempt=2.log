{"timestamp":"2025-07-20T17:02:04.061164","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-20T17:02:04.061591","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/weather_etl_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-20T17:02:04.087125Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T17:02:04.087881Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T17:02:04.088381Z","level":"info","event":"Current task name:extract_weather_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T17:02:04.088660Z","level":"info","event":"Dag name:weather_etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T17:02:09.821299Z","level":"info","event":"Weather data extracted and loaded successfully.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T17:02:10.124784","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-20T17:02:10.144451Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T17:02:10.144944Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T17:02:10.145476Z","level":"info","event":"Task operator:<Task(PythonOperator): extract_weather_data>","chan":"stdout","logger":"task"}
