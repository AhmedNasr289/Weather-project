{"timestamp":"2025-07-20T21:02:06.121451","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-20T21:02:06.122450","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/weather_etl_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-20T21:02:06.161075Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:02:06.162014Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:02:06.162347Z","level":"info","event":"Current task name:extract_weather_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:02:06.162650Z","level":"info","event":"Dag name:weather_etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.313810Z","level":"info","event":"Dropped and recreated staging.weather_data table.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.314375Z","level":"error","event":"Traceback (most recent call last):","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.314784Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 102, in <module>","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.316553Z","level":"error","event":"    extract_and_load('city.list.json.gz', limit=1000)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.317020Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 59, in extract_and_load","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.319828Z","level":"error","event":"    cities = load_city_list(city_list_path, limit=limit)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.320214Z","level":"error","event":"             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.320597Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 10, in load_city_list","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.322045Z","level":"error","event":"    with gzip.open(city_list_path, 'rt', encoding='utf-8') as f:","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.322389Z","level":"error","event":"         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.322711Z","level":"error","event":"  File \"/usr/local/lib/python3.12/gzip.py\", line 65, in open","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.322960Z","level":"error","event":"    binary_file = GzipFile(filename, gz_mode, compresslevel)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.323309Z","level":"error","event":"                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.323586Z","level":"error","event":"  File \"/usr/local/lib/python3.12/gzip.py\", line 201, in __init__","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.323904Z","level":"error","event":"    fileobj = self.myfileobj = builtins.open(filename, mode or 'rb')","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.324186Z","level":"error","event":"                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.324576Z","level":"error","event":"FileNotFoundError: [Errno 2] No such file or directory: 'city.list.json.gz'","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.636013Z","level":"info","event":"Error running extract_weather.py: Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.636351","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"CalledProcessError","exc_value":"Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":877,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1164,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":397,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":217,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":240,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/weather_etl_dag.py","lineno":26,"name":"run_extract_script"},{"filename":"/usr/local/lib/python3.12/subprocess.py","lineno":571,"name":"run"}],"is_group":false,"exceptions":[]}]}
{"timestamp":"2025-07-20T21:02:09.638262Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.638819Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.639174Z","level":"info","event":"Task:<Task(PythonOperator): extract_weather_data>","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:02:09.639721Z","level":"info","event":"Failure caused by Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:21:01.258564","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-20T21:21:01.260635","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/weather_etl_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-20T21:21:01.488227Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:21:01.488768Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:21:01.489096Z","level":"info","event":"Current task name:extract_weather_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:21:01.489458Z","level":"info","event":"Dag name:weather_etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.975331Z","level":"info","event":"Dropped and recreated staging.weather_data table.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.975673Z","level":"error","event":"Traceback (most recent call last):","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.975958Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 102, in <module>","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.977493Z","level":"error","event":"    extract_and_load('city.list.json.gz', limit=1000)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.977769Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 59, in extract_and_load","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.978840Z","level":"error","event":"    cities = load_city_list(city_list_path, limit=limit)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.979048Z","level":"error","event":"             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.979208Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 10, in load_city_list","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.982216Z","level":"error","event":"    with gzip.open(city_list_path, 'rt', encoding='utf-8') as f:","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.982521Z","level":"error","event":"         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.982678Z","level":"error","event":"  File \"/usr/local/lib/python3.12/gzip.py\", line 65, in open","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.982816Z","level":"error","event":"    binary_file = GzipFile(filename, gz_mode, compresslevel)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.982947Z","level":"error","event":"                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.983083Z","level":"error","event":"  File \"/usr/local/lib/python3.12/gzip.py\", line 201, in __init__","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.983226Z","level":"error","event":"    fileobj = self.myfileobj = builtins.open(filename, mode or 'rb')","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.983411Z","level":"error","event":"                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:03.983681Z","level":"error","event":"FileNotFoundError: [Errno 2] No such file or directory: 'city.list.json.gz'","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:21:04.271453Z","level":"info","event":"Error running extract_weather.py: Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:21:04.271414","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"CalledProcessError","exc_value":"Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":877,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1164,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":397,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":217,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":240,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/weather_etl_dag.py","lineno":26,"name":"run_extract_script"},{"filename":"/usr/local/lib/python3.12/subprocess.py","lineno":571,"name":"run"}],"is_group":false,"exceptions":[]}]}
{"timestamp":"2025-07-20T21:21:04.272935Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:21:04.273394Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:21:04.273621Z","level":"info","event":"Task:<Task(PythonOperator): extract_weather_data>","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:21:04.273980Z","level":"info","event":"Failure caused by Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","chan":"stdout","logger":"task"}
