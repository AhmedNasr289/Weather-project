{"timestamp":"2025-07-20T21:00:01.913367","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-20T21:00:01.914126","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/weather_etl_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-20T21:00:01.964896Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:00:01.965638Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:00:01.966107Z","level":"info","event":"Current task name:extract_weather_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:00:01.966438Z","level":"info","event":"Dag name:weather_etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.971932Z","level":"info","event":"Dropped and recreated staging.weather_data table.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.972488Z","level":"error","event":"Traceback (most recent call last):","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.972859Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 102, in <module>","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.974431Z","level":"error","event":"    extract_and_load('city.list.json.gz', limit=1000)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.974797Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 59, in extract_and_load","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.977081Z","level":"error","event":"    cities = load_city_list(city_list_path, limit=limit)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.977374Z","level":"error","event":"             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.977755Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 10, in load_city_list","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.979091Z","level":"error","event":"    with gzip.open(city_list_path, 'rt', encoding='utf-8') as f:","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.979440Z","level":"error","event":"         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.979734Z","level":"error","event":"  File \"/usr/local/lib/python3.12/gzip.py\", line 65, in open","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.980013Z","level":"error","event":"    binary_file = GzipFile(filename, gz_mode, compresslevel)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.980242Z","level":"error","event":"                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.980480Z","level":"error","event":"  File \"/usr/local/lib/python3.12/gzip.py\", line 201, in __init__","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.980686Z","level":"error","event":"    fileobj = self.myfileobj = builtins.open(filename, mode or 'rb')","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.980947Z","level":"error","event":"                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:04.981170Z","level":"error","event":"FileNotFoundError: [Errno 2] No such file or directory: 'city.list.json.gz'","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:00:05.265190Z","level":"info","event":"Error running extract_weather.py: Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:00:05.265181","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"CalledProcessError","exc_value":"Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":877,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1164,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":397,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":217,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":240,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/weather_etl_dag.py","lineno":26,"name":"run_extract_script"},{"filename":"/usr/local/lib/python3.12/subprocess.py","lineno":571,"name":"run"}],"is_group":false,"exceptions":[]}]}
{"timestamp":"2025-07-20T21:00:05.292979Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:00:05.293386Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:00:05.293685Z","level":"info","event":"Task:<Task(PythonOperator): extract_weather_data>","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:00:05.293931Z","level":"info","event":"Failure caused by Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:18:54.437527","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-20T21:18:54.438047","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/weather_etl_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-20T21:18:54.647385Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:18:54.647803Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:18:54.648223Z","level":"info","event":"Current task name:extract_weather_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:18:54.648607Z","level":"info","event":"Dag name:weather_etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.197820Z","level":"info","event":"Failed to recreate staging.weather_data: 002002 (42710): SQL compilation error:","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.198271Z","level":"info","event":"Object 'WEATHER_DATA' already exists.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.198755Z","level":"error","event":"Traceback (most recent call last):","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.199050Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 102, in <module>","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.200613Z","level":"error","event":"    extract_and_load('city.list.json.gz', limit=1000)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.201146Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 59, in extract_and_load","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.203018Z","level":"error","event":"    cities = load_city_list(city_list_path, limit=limit)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.203351Z","level":"error","event":"             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.203791Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 10, in load_city_list","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.205707Z","level":"error","event":"    with gzip.open(city_list_path, 'rt', encoding='utf-8') as f:","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.206045Z","level":"error","event":"         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.206284Z","level":"error","event":"  File \"/usr/local/lib/python3.12/gzip.py\", line 65, in open","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.206652Z","level":"error","event":"    binary_file = GzipFile(filename, gz_mode, compresslevel)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.207008Z","level":"error","event":"                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.207349Z","level":"error","event":"  File \"/usr/local/lib/python3.12/gzip.py\", line 201, in __init__","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.207699Z","level":"error","event":"    fileobj = self.myfileobj = builtins.open(filename, mode or 'rb')","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.208095Z","level":"error","event":"                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.208456Z","level":"error","event":"FileNotFoundError: [Errno 2] No such file or directory: 'city.list.json.gz'","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.548556Z","level":"info","event":"Error running extract_weather.py: Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.548592","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"CalledProcessError","exc_value":"Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":877,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1164,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":397,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":217,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":240,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/weather_etl_dag.py","lineno":26,"name":"run_extract_script"},{"filename":"/usr/local/lib/python3.12/subprocess.py","lineno":571,"name":"run"}],"is_group":false,"exceptions":[]}]}
{"timestamp":"2025-07-20T21:18:59.578476Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.578999Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.579555Z","level":"info","event":"Task:<Task(PythonOperator): extract_weather_data>","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:18:59.579945Z","level":"info","event":"Failure caused by Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","chan":"stdout","logger":"task"}
