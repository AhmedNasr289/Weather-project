{"timestamp":"2025-07-20T21:24:50.320238","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-20T21:24:50.320699","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/weather_etl_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-20T21:24:50.345004Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:24:50.345716Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:24:50.345998Z","level":"info","event":"Current task name:extract_weather_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:24:50.346219Z","level":"info","event":"Dag name:weather_etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.882217Z","level":"info","event":"Dropped and recreated staging.weather_data table.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.882734Z","level":"error","event":"Traceback (most recent call last):","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.883235Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 102, in <module>","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.884872Z","level":"error","event":"    extract_and_load('city.list.json.gz', limit=1000)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.885199Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 59, in extract_and_load","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.886951Z","level":"error","event":"    cities = load_city_list(city_list_path, limit=limit)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.887363Z","level":"error","event":"             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.887682Z","level":"error","event":"  File \"/opt/airflow/scripts/extract_weather.py\", line 10, in load_city_list","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.890046Z","level":"error","event":"    with gzip.open(city_list_path, 'rt', encoding='utf-8') as f:","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.890528Z","level":"error","event":"         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.890821Z","level":"error","event":"  File \"/usr/local/lib/python3.12/gzip.py\", line 65, in open","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.891100Z","level":"error","event":"    binary_file = GzipFile(filename, gz_mode, compresslevel)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.891397Z","level":"error","event":"                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.891756Z","level":"error","event":"  File \"/usr/local/lib/python3.12/gzip.py\", line 201, in __init__","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.892025Z","level":"error","event":"    fileobj = self.myfileobj = builtins.open(filename, mode or 'rb')","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.892598Z","level":"error","event":"                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:52.892902Z","level":"error","event":"FileNotFoundError: [Errno 2] No such file or directory: 'city.list.json.gz'","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-20T21:24:53.240612Z","level":"info","event":"Error running extract_weather.py: Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:24:53.240589","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"CalledProcessError","exc_value":"Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":877,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1164,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":397,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":217,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":240,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/weather_etl_dag.py","lineno":26,"name":"run_extract_script"},{"filename":"/usr/local/lib/python3.12/subprocess.py","lineno":571,"name":"run"}],"is_group":false,"exceptions":[]}]}
{"timestamp":"2025-07-20T21:24:53.241942Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:24:53.242322Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:24:53.242585Z","level":"info","event":"Task:<Task(PythonOperator): extract_weather_data>","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T21:24:53.242851Z","level":"info","event":"Failure caused by Command '['/home/airflow/.local/bin/python', '/opt/airflow/scripts/extract_weather.py']' returned non-zero exit status 1.","chan":"stdout","logger":"task"}
